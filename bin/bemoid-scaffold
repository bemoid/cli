#!/usr/bin/env node

var ora = require('ora')
var path = require('path')
var chalk = require('chalk')
var rm = require('rimraf').sync
var inquirer = require('inquirer')
var program = require('commander')
var online = require('is-online')
var exists = require('fs').existsSync

var store = require('../lib/store')
var generate = require('../lib/generate')
var download = require('../lib/download')

/**
 * COMMAND REGISTRATION
 * ----------------------------------------------------------
 */
program
  .usage('<boilerplate-name>')
  .on('--help', () => {
    console.log()
    console.log('  Examples:')
    console.log()
    console.log(chalk.gray('    # Scaffold boilerplate files based on SCSS syntax'))
    console.log('    $ bemoid scaffold scss')
    console.log()
  })


/**
 * COMMAND HELP
 * ----------------------------------------------------------
 * Outputs help text when command arguments are not provided.
 */
function help () {
  program.parse(process.argv)

  if (program.args.length < 1) return program.help()
}
help()


/**
 * COMMAND LOGIC
 * ----------------------------------------------------------
 * Generates and renders boilerplate from specified boilerplate.
 */
var boilerplate = program.args[0]
var to = path.resolve(program.args[1] || '.')
var store = store.templatePath(boilerplate)
var spinner = ora('Scaffolding the boilerplate ...')

function generateBoilerplate() {
  generate({
    boilerplate: store,
    to: to
  }, (err) => {
    if (err) throw err.message

    spinner.stop()
    console.log(chalk.green(`✓ Boilerplate [${boilerplate}] sucessfully scaffolded.`))
  })
}

function downloadAndGenerateBoilerplate(name) {
  download({
    from: name,
    to: store
  }, (err) => {
    spinner.stop()

    if (err) {
      console.log(chalk.red(`× Failed to download [${name}] boilerplate: ${err.message.trim()}`))
      process.exit(1)
    }

    generateBoilerplate()
  })
}

function runScaffolding() {
  spinner.start()

  online().then((online) => {
    if (online) {
      let isExternal = (boilerplate.indexOf('/') > -1)

      if (isExternal) {
        downloadAndGenerateBoilerplate(boilerplate)
      } else {
        downloadAndGenerateBoilerplate(`bemoid/scaffold-${boilerplate}`)
      }
    } else {
      console.log()
      console.log(chalk.gray(`> You are offline. Working using cached boilerplate [${store}] files ...`))

      if (exists(store)) {
        generateBoilerplate()
      } else {
        spinner.stop()
        console.log(chalk.yellow(`> There is no cached files of choosen [${boilerplate}] boilerplate.`))
      }
    }
  })
}

if (exists(to)) {
  var questions = [{
    type: 'confirm',
    name: 'ok',
    message: `Target directory [${to}] exists and will be overwritten. Continue?`
  }]

  inquirer
    .prompt(questions)
    .then((answers) => {
      if (answers.ok) {
        runScaffolding()
      }
    })
} else {
  runScaffolding()
}