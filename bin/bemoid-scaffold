#!/usr/bin/env node

var ora = require('ora')
var path = require('path')
var chalk = require('chalk')
var rm = require('rimraf').sync
var inquirer = require('inquirer')
var program = require('commander')
var exists = require('fs').existsSync

var store = require('../lib/store')
var generate = require('../lib/generate')

/**
 * COMMAND REGISTRATION
 * ----------------------------------------------------------
 */
program
  .usage('<template-name>')
  .on('--help', function () {
    console.log()
    console.log('  Examples:')
    console.log()
    console.log(chalk.gray('    # Scaffold boilerplate files based on SCSS syntax'))
    console.log('    $ bemoid scaffold scss')
    console.log()
  })


/**
 * COMMAND HELP
 * ----------------------------------------------------------
 * Outputs help text when command arguments are not provided.
 */
function help () {
  program.parse(process.argv)

  if (program.args.length < 1) return program.help()
}
help()


/**
 * COMMAND LOGIC
 * ----------------------------------------------------------
 * Generates and renders boilerplate from specified template.
 */
var template = program.args[0]
var to = path.resolve(program.args[1] || '.')
var tmp = store.templatePath(template)

function run() {
  var spinner = ora('Scaffolding a template')

  spinner.start()

  generate({
    template: `bemoid/scaffold-${template}`,
    from: tmp,
    to: to
  }, function (err) {
    spinner.stop()

    if (err) throw err.message;

    console.log(chalk.green(`Template [${template}] sucessfully scaffolded`))
  })
}

if (exists(to)) {
  var questions = [{
    type: 'confirm',
    name: 'ok',
    message: 'Target directory exists and will be overwritten. Continue?'
  }]

  inquirer
    .prompt(questions)
    .then(function (answers) {
      if (answers.ok) {
        run()
      }
    })
} else {
  run()
}