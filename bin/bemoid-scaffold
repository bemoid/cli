#!/usr/bin/env node

var ora = require('ora')
var path = require('path')
var chalk = require('chalk')
var rm = require('rimraf').sync
var inquirer = require('inquirer')
var program = require('commander')
var exists = require('fs').existsSync
var exec = require('child_process').exec

var version = require('../package').dependencies['@bemoid/bemoid']
var store = require('../lib/store')
var logger = require('../lib/logger')
var generator = require('../lib/generator')
var downloader = require('../lib/downloader')

/**
 * COMMAND REGISTRATION
 * ----------------------------------------------------------
 * Register command allong with options.
 */
program
  .usage('<boilerplate>')
  .on('--help', () => {
    console.log()
    console.log('  Examples:')
    console.log()
    console.log(chalk.gray('    # Scaffold boilerplate files based on SCSS syntax'))
    console.log('    $ bemoid scaffold scss')
    console.log()
  })


/**
 * COMMAND HELP
 * ----------------------------------------------------------
 * Outputs help text when command arguments are not provided.
 */
function help () {
  program.parse(process.argv)

  if (program.args.length < 1) return program.help()
}
help()


/**
 * COMMAND LOGIC
 * ----------------------------------------------------------
 * Installs package and renders files from specified boilerplate.
 */
var spinner = ora('Working ...')
var boilerplate = program.args[0]
var to = path.resolve(program.args[1] || '.')
var temp = store.templatePath(boilerplate)

function generate() {
  generator({ boilerplate: temp, to: to }, (err) => {
    spinner.stop()

    if (err) {
      logger.error(`Failed to generate a [${name}] boilerplate.\n${chalk.red(err.message.trim())}`)
    }

    logger.success(`Boilerplate [${boilerplate}] sucessfully scaffolded.`)
  })
}

function download(name) {
  downloader({ from: name, to: temp }, (err) => {
    spinner.stop()

    if (err) {
      logger.error(`Failed to download a [${name}] boilerplate.\n${chalk.red(err.message.trim())}`)
    }

    generate()
  })
}

function scaffold() {
  spinner.start('Scaffolding the boilerplate ...')

  let isExternal = (boilerplate.indexOf('/') > -1)

  if (isExternal) {
    return download(boilerplate)
  }

  return download(`bemoid/scaffold-${boilerplate}`)
}

function run() {
  spinner.start('Installing a package ...')

  if (! exists(path.resolve('./package.json'))) {
    logger.comment()
    logger.error('Could not find a `package.json`. Please run `scaffold` command where this file is located.')
  }

  exec(`npm install @bemoid/bemoid@file:../bemoid`, function (err) {
    spinner.stop()

    if (err) {
      logger.error(`Could not install a package.\n${chalk.red(err.message.trim())}`)
    }

    scaffold()
  })
}

if (exists(to)) {
  var questions = [{
    type: 'confirm',
    name: 'ok',
    message: `Target directory exists and will be overwritten. Want to continue?`
  }]

  inquirer
    .prompt(questions)
    .then((answers) => {
      if (answers.ok) {
        run()
      }
    })
} else {
  run()
}