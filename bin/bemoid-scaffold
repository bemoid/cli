#!/usr/bin/env node

var ora = require('ora')
var path = require('path')
var chalk = require('chalk')
var rm = require('rimraf').sync
var inquirer = require('inquirer')
var program = require('commander')
var online = require('is-online')
var exists = require('fs').existsSync
var exec = require('child_process').exec

var store = require('../lib/store')
var logger = require('../lib/logger')
var generate = require('../lib/generate')
var download = require('../lib/download')

/**
 * COMMAND REGISTRATION
 * ----------------------------------------------------------
 * Register command allong with options.
 */
program
  .usage('<boilerplate>')
  .on('--help', () => {
    console.log()
    console.log('  Examples:')
    console.log()
    console.log(chalk.gray('    # Scaffold boilerplate files based on SCSS syntax'))
    console.log('    $ bemoid scaffold scss')
    console.log()
  })


/**
 * COMMAND HELP
 * ----------------------------------------------------------
 * Outputs help text when command arguments are not provided.
 */
function help () {
  program.parse(process.argv)

  if (program.args.length < 1) return program.help()
}
help()


/**
 * COMMAND LOGIC
 * ----------------------------------------------------------
 * Installs package and renders files from specified boilerplate.
 */
var boilerplate = program.args[0]
var to = path.resolve(program.args[1] || '.')
var temp = store.templatePath(boilerplate)
var installSpinner = ora('Installing a package ...')
var generateSpinner = ora('Scaffolding the boilerplate ...')

function generateBoilerplate() {
  generate({
    boilerplate: temp,
    to: to
  }, (err) => {
    if (err) throw err.message

    generateSpinner.stop()
    logger.success(`Boilerplate [${boilerplate}] sucessfully scaffolded.`)
  })
}

function downloadAndGenerateBoilerplate(name) {
  download({
    from: name,
    to: temp
  }, (err) => {
    generateSpinner.stop()

    if (err) {
      logger.error(`Failed to download [${name}] boilerplate: ${err.message.trim()}`)
    }

    generateBoilerplate()
  })
}

function runScaffolding() {
  generateSpinner.start()

  let isExternal = (boilerplate.indexOf('/') > -1)

  if (isExternal) {
    return downloadAndGenerateBoilerplate(boilerplate)
  }

  return downloadAndGenerateBoilerplate(`bemoid/scaffold-${boilerplate}`)
}

function run() {
  installSpinner.start()

  online().then((online) => {
    if (online) {
      if (! exists(path.resolve('./package.json'))) {
        logger.comment()
        logger.error('Could not find a `package.json`. Please run `scaffold` command where this file is located.')
      }

      exec(`npm install @bemoid/bemoid@file:../bemoid`, function (err) {
        installSpinner.stop()

        if (err) {
          logger.error(`Could not install a package.\n${chalk.red(err.message.trim())}`)
        }

        runScaffolding()
      })
    } else {
      installSpinner.stop()

      logger.warning(`Woops, you are offline. Please connect to the internet in order to proccess scaffolding.`)
    }
  })
}

if (exists(to)) {
  var questions = [{
    type: 'confirm',
    name: 'ok',
    message: `Target directory exists and will be overwritten. Want to continue?`
  }]

  inquirer
    .prompt(questions)
    .then((answers) => {
      if (answers.ok) {
        run()
      }
    })
} else {
  run()
}